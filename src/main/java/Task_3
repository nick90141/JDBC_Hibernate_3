ORM (Object Relation Mapping) - ORM, или объектно-реляционное отображение, представляет собой программную технологию,
    которая обеспечивает связь между объектно-ориентированным программированием (ООП) и реляционными базами данных (RDBMS). Основная цель ORM состоит в том, чтобы
    упростить процесс взаимодействия с базой данных, предоставляя разработчикам способ работать с данными в терминах объектов и классов, а не в терминах таблиц и SQL-запросов.
    Основные принципы ORM включают:
    1. Отображение объектов на таблицы
    2. Автоматическое создание SQL-запросов
    3. Управление отношениями
    4. Автоматическое создание таблиц

    Java Persistence API (JPA) - это спецификация Java EE (Enterprise Edition), предоставляющая стандартный способ управления реляционными данными в приложениях, написанных на языке
    Java. JPA была введена в Java EE 5 и предоставляет абстракцию уровня объектов для взаимодействия с базами данных.
    Основные цели JPA включают:
    1. Объектно-реляционное отображение (ORM)
    2. Язык запросов
    3. Управление жизненным циклом сущностей
    4. Транзакции
    5. Маппинг объектов на таблицы базы данных

    Hibernate - это фреймворк для языка программирования Java, предназначенный для управления отображением объектов в реляционные базы данных. Он предоставляет инструменты для работы с
    базами данных в объектно-ориентированном стиле, позволяя разработчикам работать с объектами Java, а не с SQL-запросами и таблицами баз данных напрямую.

    Преимущества Hibernate:
    1. Объектно-ориентированное отображение данных
    2. Управление состоянием объектов
    3. Поддержка маппинга
    4. Транзакции и кэширование
    5. Кросс-платформенность

    Недоліки Hibernate:
    1. Сложность конфигурации
    2. Производительность
    3. Не всегда нужен полный объект
    4. Сложности в миграции
    5. Зависимость от ORM

    Hibernate API - это набор интерфейсов и классов, предоставляемых фреймворком Hibernate для взаимодействия с базой данных. Ниже приведены основные компоненты Hibernate API:
    1. SessionFactory: Это ключевой объект в Hibernate. SessionFactory создается один раз при запуске приложения и предоставляет фабрику для создания объектов Session. Он является
    тяжеловесным объектом, и обычно создается один раз за жизненный цикл приложения.
    2. Session: Объект Session представляет собой единичное соединение с базой данных и предоставляет методы для выполнения операций базы данных, таких как сохранение, обновление,
    удаление и извлечение данных.
    3. Transaction: Интерфейс, предоставляющий методы для управления транзакциями базы данных. Транзакции обеспечивают атомарность, согласованность, изолированность и устойчивость
    (ACID) операций.
    4. Query: Объект Query предоставляет методы для выполнения запросов к базе данных. Hibernate поддерживает язык HQL (Hibernate Query Language), который похож на SQL, но использует
    объекты Java вместо таблиц баз данных.
    5. Criteria: Criteria API предоставляет более типобезопасный способ создания запросов, чем HQL. Он позволяет строить запросы с использованием критериев, представляющих условия и
    ограничения.

    hibernate.cfg.xml - это файл конфигурации для Hibernate, фреймворка для работы с базами данных в Java. Hibernate используется для отображения объектов Java на записи в базе данных
    и упрощения взаимодействия с базой данных.

    @Entity - аннотация используется для обозначения класса как сущности, которую можно сохранить в базе данных

    @Id – аннотация используется для указания первичного ключа (Primary Key) в таблице базы данных для соответствующей сущности (Entity).

    Gradle - это система автоматизации сборки и управления зависимостями, которая используется в разработке программного обеспечения. Она позволяет разработчикам определять, настраивать и
    выполнить задачи сборки своего проекта, а также управлять зависимостями между компонентами проекта. Gradle обладает множеством возможностей, включая поддержку различных языков
    программирования (Java, C++, Groovy, Kotlin и др.), многопроектную сборку, автоматизацию тестирования, управление ресурсами и т.д.